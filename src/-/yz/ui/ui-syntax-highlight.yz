<title>ui-syntax-highlight</title>
<meta attribute=value type=string>
<meta attribute=language type=string>

<template mode=closed><code></code></template>

<script>
safeImport('/-/js/prism/index.js').then(mod => $.prism = mod)
safeImport('/-/js/site-settings/index.js').then(mod => $.settings = mod)

const code = query('code')

effect(async () => {
	if(!$.prism) return code.textContent = $.value
	if($.settings?.$settings.maxCharHighlight < $.value.length)
		return code.textContent = $.value
	const {Prism} = $.prism
	const grammar = Prism.languages[$.language]
	const language = grammar ? $.language : 'txt'
	code.className = `language-${language}`
	if(language == 'txt') return code.textContent = $.value
	await until(when(this).observes('intersection')
		.if(([{isIntersecting}]) => isIntersecting).once())
	code.innerHTML = Prism.highlight($.value, grammar, language)
})
</script>

<style>
:host {
	width: max-content;
	font-family: var(--font-monospace);
	/* Fixes alignment issue in Safari */
	vertical-align: bottom;
}
code {
	width: max-content;
	color: var(--text-color);
	font-family: inherit;
	&::after { content: "\200B"; }
}

/* html */
.doctype .name, .entity { color: var(--meta-color); }
.doctype .doctype-tag,
.tag .tag { color: var(--keyword-color); }
.punctuation { color: var(--text-color); }
.attr-name { color: var(--primary-color); }
.attr-value,
.attr-value > .attr-equals + .punctuation,
.attr-value > .attr-equals ~ .punctuation:last-child { color: var(--string-color); }
.attr-value > .value[class*=language-] { color: var(--text-color); }
.comment { color: var(--comment-color); }

/* css */
.language-css { color: var(--name-color); }
.rule { color: var(--keyword-color); }
.property, .variable { color: var(--name-color); }
.language-sel, .selector, .unit { color: var(--keyword-color); }
.pseudo-class { color: var(--text-color); }
.id, .class { color: var(--primary-color); }
.hexcode, .pseudo-element { color: var(--meta-color); }

/* js */
.keyword, .operator { color: var(--keyword-color); }
.string { color: var(--string-color); }
.function { color: var(--primary-color); }
.number, .meta, .boolean { color: var(--meta-color); }
.parameter { color: var(--parameter-color); }
.class-name, .native { color: var(--name-color); }
.literal-property { color: var(--text-color); }

/* regex  */
.regex-delimiter, .regex-source { color: var(--string-color); }
.regex-flags { color: var(--keyword-color); }
</style>
