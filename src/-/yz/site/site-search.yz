<title>site-search</title>
<meta attribute=value type=string>
<meta attribute=helpfulempty type=boolean as=helpfulEmpty>

<template mode=closed delegates-focus=true>
	<form @submit="$.onsubmit(event)">
		<label for=input>Search the site</label>
		<input id=input type=search autocomplete=off autocapitalize=none part=searchinput
			autocorrect=off spellcheck=false enterkeyhint=go
			placeholder="live variables"
			@keydown="$.onkeydown(event)"
			@focus="$.focused = true"
			@blur="$.focused = false">
		<ul .hidden="!$.helpfulEmpty && $.value == '' || !$.focused"
			:class+empty="$.amount == 0"
			:class+loading="$.loading"
		>
			<li #for="[index, result] of $.$results.entries()"
				:class+selected="$.selected == index"
				@mouseenter="$.selected = index">
				<a :href="result.url">
					<span class=title>
						<ui-icon #if="$.getIcon(result.url)" :type="$.getIcon(result.url)"></ui-icon>
						{{ result.title }}
					</span>
					<span class=url>
						{{ result.url.split('/').slice(1, -1).join(' â€º ') }}
					</span>
				</a>
			</li>
		</ul>
	</form>
</template>

<script>
safeImport('/-/js/site-search/index.js').then(mod => $.siteSearch = mod)
$.focused = false
$.selected = 0
$.results = []
live.link($.$value, query('input'))
live.link($.$amount, () => $.$results.length ?? 0)

effect(async () => {
	if($.helpfulEmpty && $.value == '') return $.showMains()
	if($.value == '') return
	if(!$.siteSearch) return
	$.loading = true
	$.results = await until($.siteSearch?.search($.value))
	$.loading = false
	$.selected = 0
})

const shortcuts = {
	ArrowDown: () => $.selected = ($.selected + 1) % $.amount,
	ArrowUp: () => $.selected = ($.selected + $.amount - 1) % $.amount,
	Home: () => $.selected = 0,
	End: () => $.selected = $.amount - 1,
}
$.onkeydown = event => {
	if(!shortcuts[event.key]) return
	event.preventDefault()
	shortcuts[event.key]()
}

$.onsubmit = event => {
	event.preventDefault()
	const li = query.all('li')[$.selected]
	li?.querySelector('a').click()
}

const mains = [
	// {title: 'Tour', url: '/tour/'},
	{title: 'Documentation', url: '/docs/'},
	{title: 'Playground', url: '/play/'},
	{title: 'Blog', url: '/blog/'},
	{title: 'Download', url: '/download/'},
]
$.clear = () => $.results = []
$.showMains = () => $.results = [...mains]
$.getIcon = url => {
	if(url.startsWith('/docs/')) return 'book'
	if(url.startsWith('/blog/')) return 'chat'
	if(url.startsWith('/tour/')) return 'learn'
	if(url.startsWith('/play/')) return 'controller'
	if(url.startsWith('/download/')) return 'download'
}
</script>

<style>
:host {
	display: inline-block;
}
form {
	display: grid; width: 100%; height: 100%;
	grid-template: auto / 1fr 3rem; place-items: center start;
	position: relative;
	overflow-x: clip;
}
label {
	grid-area: 1 / 1 / -1 / -1;
	padding: 0 1.25rem;
	z-index: 1;
	opacity: 0;
	white-space: nowrap;
}
label:has(+ input:placeholder-shown){
	opacity: 1;
	color: var(--comment-color);
}
::placeholder { opacity: 0; }
input {
	grid-area: 1 / 1 / -1 / -1;
	width: 100%; min-width: 0; height: 3rem;
	color: inherit; background-color: var(--highlight-color);
	border: none; border-radius: .75rem;
	font-size: inherit; font-family: var(--font-monospace);
	padding: 1rem 1.25rem;
	outline: none;
	transition: border-radius .08s;
}
input:has(+ ul:not([hidden])){ border-radius: .75rem .75rem 0 0; }
ul {
	display: flex; max-height: 60vh; padding: .25rem .5rem .5rem; margin: 0;
	flex-direction: column; gap: .5rem;
	list-style: none;
	position: absolute; inset: 100% 0 auto 0;
	background-color: var(--highlight-color);
	border-radius: 0 0 .75rem .75rem;
	overflow: auto;
	transition: opacity .2s, translate .2s, visibility 0s 0s;
	z-index: -1;
	&[hidden]{
		translate: 0 -1rem;
		opacity: 0; visibility: hidden;
		transition: opacity .2s, translate .2s, visibility .2s 0s;
	}
	&.empty::after {
		content: "No results found.";
		display: block; padding: .5rem 1rem;
		color: var(--comment-color);
		background-color: var(--background-color);
		border-radius: .5rem;
	}
	&::before {
		content: "";
		display: block;
		position: absolute; inset: 0;
		background-color: var(--highlight-color);
		visibility: hidden; opacity: .5;
	}
	&.loading::before {
		visibility: visible;
		transition: visibility 0s .1s;
	}
}
li {
	background-color: var(--background-color);
	border-radius: .5rem;
	transition: .2s;
	&.selected { background-color: var(--sub-background-color); }
	a {
		display: flex; padding: .5rem 1rem;
		flex-direction: column;
		color: var(--text-color);
		text-decoration: none;
		ui-icon {
			padding: 0;
			&[type=book]{ color: var(--name-color); }
			&[type=learn]{ color: var(--primary-color); }
			&[type=chat]{ color: var(--string-color); }
			&[type=controller]{ color: var(--keyword-color); }
			&[type=download]{ color: var(--meta-color); }
		}
		.title {
			display: flex;
			align-items: center; gap: .5rem;
		}
		.url {
			font-size: .8rem;
			color: var(--comment-color);
		}
	}
}
</style>