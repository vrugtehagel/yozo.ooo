<title>ui-icon</title>
<meta attribute=type type=string>
<meta attribute=state type=string>
<meta attribute=width type=number default=1>
<meta attribute=height type=number default=1>

<template mode=closed>
	<div id=container :class="$.state || null"
		:style="`aspect-ratio: ${$.width} / ${$.height};`"></div>
</template>

<script>
const container = query('#container')

this.constructor.cache ??= new Map
const {cache} = this.constructor

const getCached = name => {
	const url = new URL(`${name}.svg`, `${window.location.origin}/-/icons/`)
	const {pathname} = url
	const cached = cache.get(pathname)
	if(cached) return cached
	const promise = fetchIcon(url)
	cache.set(pathname, promise)
	return promise
}

const fetchIcon = async url => {
	const response = await fetch(url).catch(() => null)
	if(!response?.ok) return false
	const text = await response.text()
	const template = document.createElement('template')
	template.innerHTML = text
	const fragment = template.content
	return fragment
}

connected(() => effect(async () => {
	container.replaceChildren()
	if(!$.type) return
	const fragment = await until(getCached($.type))
	if(!fragment) return
	container.append(fragment.cloneNode(true))
}))
</script>

<style>
:host {
	display: inline-block; height: 1.5rem; padding: .75rem;
}
::selection {
	color: #00000001;
	background-color: var(--highlight-color);
}
#container {
	margin: auto;
}
#container, svg {
	display: block; height: 100%;
}
</style>
